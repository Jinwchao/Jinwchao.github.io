library(tidyr)
library(dplyr)
library(rworldmap)
library(readr)

world_population <- read_csv("world_population.csv")
world_lon_lat <- read_csv("world_lon_lat.csv")

# 假设world_population和world_lon_lat已经被加载
# 首先，我们需要确保两个数据集中国家名称列的名称相同，以便合并
world_population <- world_population %>%
  rename(country = `Country/Territory`)

# 合并数据集
world_data <- merge(world_population, world_lon_lat, by = "country")

world_data_long <- pivot_longer(world_data,
                                cols = c(`2022 Population`, `2020 Population`, `2015 Population`, `2010 Population`, `2000 Population`, `1990 Population`, `1980 Population`, `1970 Population`),
                                names_to = "Year",
                                values_to = "Population")

library(shiny)
library(leaflet)
library(dplyr)

ui <- fluidPage(
  titlePanel("World Population Map"),
  sidebarLayout(
    sidebarPanel(
      sliderInput("year",
                  "Select Year:",
                  min = 1970,
                  max = 2022,
                  value = 2022,
                  step = 1)
    ),
    mainPanel(
      leafletOutput("worldMap")
    )
  )
)

server <- function(input, output) {
  output$worldMap <- renderLeaflet({
    # 根据选择的年份过滤数据
    data_filtered <- world_data_long %>%
      filter(Year == as.character(input$year)) %>%
      mutate(Color = ifelse(Population > median(Population, na.rm = TRUE), "red", "green"))
    
    # 创建地图
    leaflet(data_filtered) %>%
      addTiles() %>%
      addCircles(lng = ~lon, lat = ~lat, color = ~Color, weight = 1, radius = ~sqrt(Population) * 30, popup = ~paste(country, Population))
  })
}

# 运行Shiny应用
shinyApp(ui, server)
