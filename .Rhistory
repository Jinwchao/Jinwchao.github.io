print(file.exists(pythonPath))
1 + 3
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize),col='darkorchid',xlab="Sample",main="Standard Normally Distributed Sample")},
height=300
)
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages("shiny")
library(shiny)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("samplesize","Sample Size:",min = 100,max = 10000,value = 1000)),
mainPanel(plotOutput("distPlot"))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize),col='darkorchid',xlab="Sample",main="Standard Normally Distributed Sample")},
height=300
)
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages("rsconnect")
rsconnect::setAccountInfo(name='jinwchao',
token='D37A7EF4DC463C58E1D59F75F6F78787',
secret='+jFcc20LjzCpSc+k/1fC9Wk8r4x3Wu3pKd6Z29nL')
rsconnect::setAccountInfo(name='jinwchao',
token='D37A7EF4DC463C58E1D59F75F6F78787',
secret='+jFcc20LjzCpSc+k/1fC9Wk8r4x3Wu3pKd6Z29nL')
rsconnect::setAccountInfo(name='jinwchao',
token='D37A7EF4DC463C58E1D59F75F6F78787',
secret='+jFcc20LjzCpSc+k/1fC9Wk8r4x3Wu3pKd6Z29nL')
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("samplesize","Sample Size:",min = 100,max = 10000,value = 1000)),
mainPanel(plotOutput("distPlot"))
)
)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("samplesize","Sample Size:",min = 100,max = 10000,value = 1000)),
mainPanel(plotOutput("distPlot"))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize),col='darkorchid',xlab="Sample",main="Standard Normally Distributed Sample")},
height=300
)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("samplesize","Sample Size:",min = 100,max = 10000,value = 1000)),
mainPanel(plotOutput("distPlot"))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize),col='darkorchid',xlab="Sample",main="Standard Normally Distributed Sample")},
height=300
)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("samplesize","Sample Size:",min = 100,max = 10000,value = 1000)),
mainPanel(plotOutput("distPlot"))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize),col='darkorchid',xlab="Sample",main="Standard Normally Distributed Sample")},
height=300
)
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('personal_app')
library(shiny); runApp('app-2/app.R.2.R')
runApp('app-2/app.R.2.R')
runApp('app-2/app.R.2.R')
world_data
world_population
runApp('app-2/app.R.2.R')
runApp('app-2/app.R.2.R')
world_population
world_data
global_temp
runApp('personal_app')
runApp('app-2/app.R.2.R')
runApp('app-2/app.R.2.R')
runApp('app-2/app.R.2.R')
runApp('app-2/app.R.2.R')
runApp('app-2/app.R.2.R')
runApp('app-2/app.R.2.R')
runApp('app-2/app.R.2.R')
runApp('app-2/app.R.2.R')
runApp('app-2/app.R.2.R')
runApp('app-2/app.R.2.R')
runApp('app-2/app.R.2.R')
runApp('app-2/app.R.2.R')
runApp('app-2/app.R.2.R')
runApp('app-2/app.R.2.R')
runApp('app-2/app.R.2.R')
runApp('app-2/app.R.2.R')
runApp('app-2/app.R.2.R')
As the Earth's temperature slowly rises, we are not only facing disappearing glaciers, rising sea levels and an increase in extreme weather events - our food security is also being threatened as never before. The impacts of global warming on agriculture are far-reaching and complex, and from shifts in planting seasons to adjustments in crop growth cycles, climate change is rewriting the global food production map.
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='jinwchao',
token='84E5BB014292AA3F6B1EF795D92859F8',
secret='WXAj6HJqePrHg3atJHhuNVFlHQzNrOoftlfB6NVD')
setwd("D:/homework/NM2207/Jinwchao.github.io/app-2")
library(shiny); runApp('app.R.2.R')
setwd("D:/homework/NM2207/Jinwchao.github.io/app-3")
ui <- fluidPage(
titlePanel("Crop Production by Country"),
sidebarLayout(
sidebarPanel(
# 创建一个滑动条来选择年份
sliderInput("year",
"Select Year:",
min = min(Crop_production$Time),
max = max(Crop_production$Time),
value = max(Crop_production$Time),
step = 1)
),
mainPanel(
# 显示柱状图
plotOutput("cropPlot")
)
)
)
# 假设 Crop_production 是你的数据集名称
# 你需要先读取数据
Crop_production <- read_csv("crop_production.csv")
ui <- fluidPage(
titlePanel("Crop Production by Country"),
sidebarLayout(
sidebarPanel(
# 创建一个滑动条来选择年份
sliderInput("year",
"Select Year:",
min = min(Crop_production$Time),
max = max(Crop_production$Time),
value = max(Crop_production$Time),
step = 1)
),
mainPanel(
# 显示柱状图
plotOutput("cropPlot")
)
)
)
server <- function(input, output) {
output$cropPlot <- renderPlot({
# 根据选择的年份过滤数据
data_filtered <- Crop_production %>%
filter(Time == input$year) %>%
group_by(Location) %>%
summarize(AverageProduction = mean(Value, na.rm = TRUE))
# 绘制柱状图
ggplot(data_filtered, aes(x = Location, y = AverageProduction)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +  # 如果国家名称较长，可以旋转标签
labs(x = "Country", y = "Average Crop Production", title = paste("Crop Production in", input$year))
})
}
runApp('app-3.R')
runApp('app-3.R')
runApp('app-3.R')
runApp('app-3.R')
runApp('app-3.R')
rsconnect::setAccountInfo(name='jinwchao',
token='84E5BB014292AA3F6B1EF795D92859F8',
secret='WXAj6HJqePrHg3atJHhuNVFlHQzNrOoftlfB6NVD')
setwd("D:/homework/NM2207/Jinwchao.github.io")
Join Us
